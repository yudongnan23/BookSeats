import requests
import json
import time
import os
import re
from atexit import register
import threading
from time import sleep
from datetime import datetime

# 定义查座位对应的参数

dict = {'1': '26199', '2': '26200', '3': '26201', '4': '26202', '5': '26203', '6': '26204', '7': '26205', '8': '26206', '9': '26207', '10': '26208', '11': '26209', '12': '26210', '13': '26211', '14': '26212', '15': '26213', '16': '26214', '17': '26215', '18': '26216', '19': '26217', '20': '26218', '21': '26219', '22': '26220', '23': '26221', '24': '26222', '25': '26223', '26': '26224', '27': '26225', '28': '26226', '29': '26227', '30': '26228', '31': '26229', '32': '26230', '33': '26231', '34': '26232', '35': '26233', '36': '26234', '37': '26235', '38': '26236', '39': '26237', '40': '26238', '41': '26239', '42': '26240', '43': '26241', '44': '26242', '45': '26243', '46': '26244', '47': '26245', '48': '26246', '49': '26247', '50': '26248', '51': '26249', '52': '26250', '53': '26251', '54': '26252', '55': '26253', '56': '26254', '57': '26255', '58': '26256', '59': '26257', '60': '26258', '61': '26259', '62': '26260', '63': '26261', '64': '26262', '65': '26263', '66': '26264', '67': '26265', '68': '26266', '69': '26267', '70': '26268', '71': '26269', '72': '26270', '73': '26271', '74': '26272', '75': '26273', '76': '26274', '77': '26275', '78': '26276', '79': '26277', '80': '26278', '81': '26279', '82': '26280', '83': '26281', '84': '26282', '85': '26283', '86': '26284', '87': '26285', '88': '26286', '89': '26287', '90': '26288', '91': '26289', '92': '26290', '93': '26291', '94': '26292', '95': '26293', '96': '26294', '97': '26295', '98': '26296', '99': '26297', '100': '26298', '101': '26299', '102': '26300', '103': '26301', '104': '26302', '105': '26303', '106': '26304', '107': '26305', '108': '26306', '109': '26307', '110': '26308', '111': '26309', '112': '26310', '113': '26311', '114': '26312', '115': '26313', '116': '26314', '117': '26315', '118': '26316', '119': '26317', '120': '26318', '121': '26319', '122': '26320', '123': '26321', '124': '26322', '125': '26323', '126': '26324', '127': '26325', '128': '26326', '129': '26328', '130': '26329', '131': '26330', '132': '26331', '133': '26332', '134': '26333', '135': '26334', '136': '26335', '137': '26336', '138': '26337', '139': '26338', '140': '26339', '141': '26340', '142': '26341', '143': '26342', '144': '26343', '145': '26344', '146': '26345', '147': '26346', '148': '26347', '149': '26348', '150': '26349', '151': '26350', '152': '26351', '153': '26352', '154': '26353', '155': '26354', '156': '26355', '157': '26356', '158': '26357', '159': '26358', '160': '26359', '161': '26360', '162': '26361', '163': '26362', '164': '26363', '165': '26364', '166': '26365', '167': '26366', '168': '26367', '169': '26368', '170': '26369', '171': '26370', '172': '26371', '173': '26372', '174': '26373', '175': '26374', '176': '26375', '177': '26376', '178': '26377', '179': '26378', '180': '26379', '181': '26380', '182': '26381', '183': '26382', '184': '26383', '185': '26384', '186': '26385', '187': '26386', '188': '26387', '189': '26388', '190': '26389', '191': '26390', '192': '26391', '193': '26392', '194': '26393', '195': '26394', '196': '26395', '197': '26396', '198': '26397', '199': '26398', '200': '26399', '201': '26400', '202': '26401', '203': '26402', '204': '26403', '205': '26404', '206': '26405', '207': '26406', '208': '26407', '209': '26408', '210': '26409', '211': '26410', '212': '26411', '213': '26412', '214': '26413', '215': '26414', '216': '26415', '217': '26416', '218': '26417', '219': '26418', '220': '26419', '221': '26420', '222': '26421', '223': '26422', '224': '26423', '225': '26424', '226': '26425', '227': '26426', '228': '26427', '229': '26428', '230': '26429', '231': '26430', '232': '26431', '233': '26432', '234': '26433', '235': '26434', '236': '26435', '237': '26436', '238': '26437', '239': '26438', '240': '26439', '241': '26440', '242': '26441', '243': '26442', '244': '26443', '245': '26444', '246': '26445', '247': '26446', '248': '26447', '249': '26448', '250': '26449', '251': '26450', '252': '26451', '253': '26452', '254': '26453', '255': '26454', '256': '26455', '257': '26456', '258': '26457', '259': '26458', '260': '26459', '261': '26460', '262': '26461', '263': '26462', '264': '26463', '265': '26464', '266': '26465', '267': '26466', '268': '26467', '269': '26468', '270': '26469', '271': '26470', '272': '26471', '273': '26472', '274': '26473', '275': '26474', '276': '26475', '277': '26476', '278': '26477', '279': '26478', '280': '26479', '281': '26480', '282': '26481', '283': '26482', '284': '26483', '285': '26484', '286': '26485', '287': '26486', '288': '26487', '289': '26488', '290': '26489', '291': '26490', '292': '26491', '293': '26492', '294': '26493', '295': '26494', '296': '26495', '297': '26496', '298': '26497', '299': '26498', '300': '26499', '301': '26500', '302': '26501', '303': '26502', '304': '26503', '305': '26504', '306': '26505', '307': '26506', '308': '26507', '309': '26508', '310': '26509', '311': '26510', '312': '26511', '313': '26512', '314': '26513', '315': '26514', '316': '26515', '317': '26516', '318': '26517', '319': '26518', '320': '26519', '321': '26520', '322': '26521', '323': '26522', '324': '26523', '325': '26524', '326': '26525', '327': '26526', '328': '26527', '329': '26528', '330': '26529', '331': '26530', '332': '26531', '333': '26532', '334': '26533', '335': '26534', '336': '26535', '337': '26536', '338': '26537', '339': '26538', '340': '26539', '341': '26540', '342': '26541', '343': '26542', '344': '26543', '345': '26544', '346': '26545', '347': '26546', '348': '26547', '349': '26548', '350': '26549', '351': '26550', '352': '26551', '353': '26552', '354': '26553', '355': '26554', '356': '26555', '357': '26556', '358': '26557', '359': '26558', '360': '26559', '361': '26560', '362': '26561', '363': '26562', '364': '26563', '365': '26564', '366': '26565', '367': '26566', '368': '26567', '369': '26568', '370': '26569', '371': '26570', '372': '26571', '373': '26572', '374': '26573', '375': '26574', '376': '26575', '377': '26576', '378': '26577', '379': '26578', '380': '26579', '381': '26580', '382': '26581', '383': '26582', '384': '26583', '385': '26584', '386': '26585', '387': '26586', '388': '26587', '389': '26588', '390': '26589', '391': '26590', '392': '26591', '393': '26592', '394': '26593', '395': '26594', '396': '26595', '397': '26596', '398': '26597', '399': '26598', '400': '26599', '401': '26600', '402': '26601', '403': '26602', '404': '26603', '405': '26604', '406': '26605', '407': '26606', '408': '26607', '409': '26608', '410': '26609', '411': '26610', '412': '26611', '413': '26612', '414': '26613', '415': '26614', '416': '26615', '417': '26616', '418': '26617', '419': '26618', '420': '26619', '421': '26620', '422': '26621', '423': '26622', '424': '26623', '425': '26624', '426': '26625', '427': '26626', '428': '26627', '429': '26628', '430': '26629', '431': '26630', '432': '26631', '433': '26632', '434': '26633', '435': '26634', '436': '26635', '437': '26636', '438': '26637', '439': '26638', '440': '26639', '441': '26640', '442': '26641', '443': '26642', '444': '26643', '445': '26644', '446': '26645', '447': '26646', '448': '26647', '449': '26648', '450': '26649', '451': '26650', '452': '26651', '453': '26652', '454': '26653', '455': '26654', '456': '26655', '457': '26656', '458': '26657', '459': '26658', '460': '26659', '461': '26660', '462': '26661', '463': '26662', '464': '26663', '465': '26664', '466': '26665', '467': '26666', '468': '26667', '469': '26668', '470': '26669', '471': '26670', '472': '26671', '473': '26672', '474': '26673', '475': '26674', '476': '26675', '477': '26676', '478': '26677', '479': '26678', '480': '26679', '481': '26680', '482': '26681', '483': '26682', '484': '26683', '485': '26684', '486': '26685', '487': '26686', '488': '26687'}
def search(seat_Id):
    if seat_Id in dict:
        return dict[seat_Id]

# 定义时间转换的函数
def time_change(time_from):
    day_time = datetime.strptime(time_from,'%Y-%m-%d %H:%M:%S')

    tick =  str(int(time.mktime(time.strptime(str(day_time), '%Y-%m-%d %H:%M:%S'))))
    return tick



class Book:
    def __init__(self,user_Id,user_password,seat_Id,time_from,book_time):
        self.user_Id = user_Id                      # 学号
        self.user_password = user_password          # 登录密码
        self.seat_Id = seat_Id                      # 预定座位号
        self.time_from = time_from                  # 预定开始时间
        self.book_time = book_time                  # 预定时间

        # 登录访问url
        self.login_url = 'https://jxnu.huitu.zhishulib.com/api/1/login'
        # seatBookers数据提取url
        self.data_get_url = 'https://jxnu.huitu.zhishulib.com/Seat/Index/searchSeats?LAB_JSON=1'
        # 座位预定url
        self.book_url = 'https://jxnu.huitu.zhishulib.com/Seat/Index/bookSeats?LAB_JSON=1'


        # 定义网页请求头
        self.request_headers = {
            'Host': 'jxnu.huitu.zhishulib.com',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://jxnu.huitu.zhishulib.com/',
            'content-type': 'text/plain',
            'Content-Length': '262',
            'Connection': 'keep-alive',
            'Cookie': 'web_language=zh-CN'
        }


        # 定义登录提交的表单数据
        self.login_data = {
            "login_name": self.user_Id,
            "password": self.user_password,
            "org_id": "142",
            "_ApplicationId": "lab4",
            "_JavaScriptKey": "lab4",
            "_ClientVersion": "js_xxx",
            '_InstallationId': '48ebf6af-881b-d19f-5ff3-3eab4844610c',
            '_JavaScriptKey': 'lab4',
            'code': '0dcab0ba032be24743dc5e68510171e2',
            'str': '8jmGS9R365DtmauJ'
        }

        # 定义会话session
        self.ss = requests.session()
        # 执行登录函数
        self.login()
        # 执行预定座位函数并打印出预约结果
        count = 0
        while True:
            msg = re.search('已有的预约', self.book())
            if msg:
                print(self.user_Id+' 预约成功')
                break
            else:
                print(self.user_Id+' 预约失败')
                count += 1
                if count == 100:
                    break
                continue

     # 定义登录函数
    def login(self):
        data = json.dumps(self.login_data)
        rsp = self.ss.post(self.login_url,data = data, headers = self.request_headers).text

    # 定义预定提交函数
    def book(self):
        # 将预定开始时间转化为时间戳
        time_from = time_change(self.time_from)
        # 将预定时间转换为格式化类型
        book_time = str(int(self.book_time)*60*60)
        # 获取seatBookers的参数
        booker = self.getseatBooker()
        # 获取预定位置码
        seat_Id = search(self.seat_Id)
        # 定义预定座位提交的表单数据
        book_data = {
            'LAB_JSON': 1,
            'beginTime': time_from,
            'duration': book_time,
            'seats[0]': seat_Id,
            'seatBookers[0]':booker
        }
        rsp = self.ss.post(url = self.book_url,data = book_data)
        return rsp.text

    # 定义获取预定座位时post参数中seatBookers[0]的数据
    # @jit
    def getseatBooker(self):
        rsp = self.ss.get(self.data_get_url)
        dict = json.loads(rsp.text)
        return dict['DATA']['uid']


if __name__ == '__main__':
    start = time.time()
    month = str(time.localtime().tm_mon)
    day = str(time.localtime().tm_mday+1)
    lists = [
            ("201626702010","666666",'329','2019-{}-{} 8:00:00'.format(month,day),'10'),    # 余冬南
            ('201626702012','666666','342','2019-{}-{} 8:00:00'.format(month,day),'14'),    # 备用
            ('201626702011','666666','277','2019-{}-{} 8:00:00'.format(month,day),'14'),    # 蔡源
        ('201725101347', 'fyAILC10', '41', '2019-{}-{} 8:00:00'.format(month, day), '14'),  # 方圆
        ('201625201385', '666666', '281', '2019-{}-{} 9:00:00'.format(month, day), '13'),   # 周小惠
        ('201626702035', '666666', '324', '2019-{}-{} 9:00:00'.format(month, day), '13'),   # 熊小涛
        ('201626802222','00000a','343','2019-{}-{} 7:00:00'.format(month,day),'15'),        # 徐梦琪
            ('201626101011','666666','422','2019-{}-{} 8:00:00'.format(month,day),'14'),    # 何萌
            ('201626101014','lzj19820417','469','2019-{}-{} 8:00:00'.format(month,day),'14'), # 何萌室友
            ('201626101017',"666666",'24','2019-{}-{} 7:00:00'.format(month,day),'15'),     # 何萌室友

              ]
    # thread1 = threading.Thread(target=Book,args=(lists[0][0],lists[0][1],lists[0][2],lists[0][3],lists[0][4]))
    # thread1.start()
    # thread2 = threading.Thread(target=Book,args=(lists[1][0],lists[1][1],lists[1][2],lists[1][3],lists[1][4]))
    # thread2.start()
    # thread3 = threading.Thread(target=Book, args=(lists[2][0], lists[2][1], lists[2][2], lists[2][3], lists[2][4]))
    # thread3.start()
    # thread4 = threading.Thread(target=Book, args=(lists[3][0], lists[3][1], lists[3][2], lists[3][3], lists[3][4]))
    # thread4.start()
    thread5 = threading.Thread(target=Book, args=(lists[4][0], lists[4][1], lists[4][2], lists[4][3], lists[4][4]))
    thread5.start()
    thread6 = threading.Thread(target=Book, args=(lists[5][0], lists[5][1], lists[5][2], lists[5][3], lists[5][4]))
    thread6.start()
    # thread7 = threading.Thread(target=Book, args=(lists[6][0], lists[6][1], lists[6][2], lists[6][3], lists[6][4]))
    # thread7.start()
    thread8 = threading.Thread(target=Book, args=(lists[7][0], lists[7][1], lists[7][2], lists[7][3], lists[7][4]))
    thread8.start()
    thread9 = threading.Thread(target=Book, args=(lists[8][0], lists[8][1], lists[8][2], lists[8][3], lists[8][4]))
    thread9.start()
    thread10 = threading.Thread(target=Book, args=(lists[9][0], lists[9][1], lists[9][2], lists[9][3], lists[9][4]))
    thread10.start()
    # thread1.join()
    # thread3.join()
    thread5.join()
    thread6.join()
    # thread7.join()
    thread8.join()
    thread9.join()
    thread10.join()

    end = time.time()
    print("程序执行时间：", end - start)
    os.system('pause')